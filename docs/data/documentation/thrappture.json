{"variants":[{"paths":["\/documentation\/thrappture"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"roleHeading":"Framework","title":"Thrappture","symbolKind":"module","modules":[{"name":"Thrappture"}],"role":"collection","externalID":"Thrappture"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Property wrappers cannot throw."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Optional","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" are not property wrappers."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This package imagines what life would be like if those statements were not true. ü§©","type":"text"}],"type":"paragraph"},{"type":"thematicBreak"},{"text":"What‚Äôs a ‚ÄúThrowing Property Wrapper‚Äù?","level":4,"anchor":"Whats-a-Throwing-Property-Wrapper","type":"heading"},{"inlineContent":[{"type":"text","text":"Some types are conceptually just wrappers around a value, giving it additional behavior. Swift uses "},{"isActive":true,"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/properties\/#Property-Wrappers"},{"type":"text","text":" to represent these types."}],"type":"paragraph"},{"inlineContent":[{"text":"But while throwing errors from properties is supported, throwing errors from a property wrapper‚Äôs ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"text":" property, specifically, is not (yet). That‚Äôs what a ‚Äúthrowing property wrapper‚Äù would employ.","type":"text"}],"type":"paragraph"},{"text":"Optional and Result should be throwing property wrappers.","level":3,"anchor":"Optional-and-Result-should-be-throwing-property-wrappers","type":"heading"},{"inlineContent":[{"code":"Optional","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" both predate property wrappers, but it‚Äôs the right model for them, and we should embrace that as much as possible.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While we can‚Äôt actually "},{"type":"emphasis","inlineContent":[{"type":"text","text":"turn them"}]},{"type":"text","text":" into throwing property wrappers, thinking of them that way enables aids with understanding the helpful utilities found in this package."}],"type":"paragraph"},{"text":"Optional","level":4,"anchor":"Optional","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"Optional"},{"type":"text","text":" acts "},{"type":"emphasis","inlineContent":[{"type":"text","text":"halfway"}]},{"type":"text","text":" to being a property wrapper."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can "},{"type":"emphasis","inlineContent":[{"inlineContent":[{"type":"text","text":"set"}],"type":"strong"}]},{"type":"text","text":" an optional to what would be its ‚Äú"},{"type":"codeVoice","code":"\"wrappedValue"},{"type":"text","text":"‚Äù."}],"type":"paragraph"},{"syntax":"swift","code":["var value: Optional = 1","value = 2"],"type":"codeListing"},{"inlineContent":[{"text":"But there is no mechanism in place to assign an optional to an instance of its wrapped value.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let newValue: Int = value \/\/ Value of optional type 'Int?' must be unwrapped to a value of type 'Int'"],"type":"codeListing"},{"inlineContent":[{"text":"And it‚Äôs as if ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" somehow had an overloaded ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"text":" ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" accessor to match that, because you can also ","type":"text"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"set"}]}],"type":"emphasis"},{"text":" an optional to be another optional.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["value = .some(3)","value = nil"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Property wrappers deal with that kind of conflation by using "},{"type":"emphasis","inlineContent":[{"type":"text","text":"projected values"}]},{"type":"text","text":", by way of ‚Äú"},{"type":"codeVoice","code":"$"},{"type":"text","text":"‚Äù syntax. If "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" were a throwing property wrapper, the syntax would be this, instead:"}],"type":"paragraph"},{"syntax":"swift","code":["@Optional var value = 1","value = 2","$value = .some(3)","$value = nil","let newValue: Int = try value"],"type":"codeListing"},{"inlineContent":[{"text":"What would that last line throw? ","type":"text"},{"identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift\/Optional\/Nil","type":"reference","overridingTitle":"Optional.Nil","overridingTitleInlineContent":[{"type":"text","text":"Optional.Nil"}],"isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Result","anchor":"Result","level":4,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"Result"},{"type":"text","text":" doesn‚Äôt have the conflation problem that "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" does, but that‚Äôs because it doesn‚Äôt offer any syntactic sugar."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" were a throwing property wrapper, the syntax for a ‚Äú"},{"type":"codeVoice","code":"Result"},{"type":"text","text":" version‚Äù of the previous example would be this:"}],"type":"paragraph"},{"syntax":"swift","code":["@Result<_, Int?.Nil> var value = 1","value = 2","$value = .success(3)","$value = .failure(nil)","let newValue: Int = try value"],"type":"codeListing"},{"type":"thematicBreak"},{"text":"Usage Examples","anchor":"Usage-Examples","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"You‚Äôve got the source code, so aside from reading this documentation, see the "},{"type":"strong","inlineContent":[{"type":"text","text":"Tests"}]},{"type":"text","text":" folder for example usage! üò∫"}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Treat "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" like the throwing property wrappers they are."}],"identifier":{"url":"doc:\/\/Thrappture\/documentation\/Thrappture","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Thrappture\/documentation\/Thrappture\/Notes-on-Conversion"],"anchor":"Topics"},{"identifiers":["doc:\/\/Thrappture\/documentation\/Thrappture\/ThrowingPropertyWrapper"],"generated":true,"title":"Protocols","anchor":"Protocols"},{"identifiers":["doc:\/\/Thrappture\/documentation\/Thrappture\/Swift"],"generated":true,"title":"Extended Modules","anchor":"Extended-Modules"}],"references":{"doc://Thrappture/documentation/Thrappture/Notes-on-Conversion":{"title":"Notes on Conversion","identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Notes-on-Conversion","url":"\/documentation\/thrappture\/notes-on-conversion","kind":"article","role":"article","abstract":[],"type":"topic"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Property-Wrappers":{"title":"property wrappers","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/properties\/#Property-Wrappers","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/properties\/#Property-Wrappers","type":"link","titleInlineContent":[{"text":"property wrappers","type":"text"}]},"doc://Thrappture/documentation/Thrappture/Swift/Optional/Nil":{"navigatorTitle":[{"text":"Nil","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift\/Optional\/Nil","url":"\/documentation\/thrappture\/swift\/optional\/nil","title":"Optional.Nil","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Nil","kind":"identifier"}],"abstract":[{"text":"An error that represents that an ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" was ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},"doc://Thrappture/documentation/Thrappture":{"abstract":[{"text":"Treat ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" like the throwing property wrappers they are.","type":"text"}],"identifier":"doc:\/\/Thrappture\/documentation\/Thrappture","title":"Thrappture","kind":"symbol","url":"\/documentation\/thrappture","role":"collection","type":"topic"},"doc://Thrappture/documentation/Thrappture/ThrowingPropertyWrapper":{"title":"ThrowingPropertyWrapper","kind":"symbol","navigatorTitle":[{"text":"ThrowingPropertyWrapper","kind":"identifier"}],"identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/ThrowingPropertyWrapper","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ThrowingPropertyWrapper","kind":"identifier"}],"url":"\/documentation\/thrappture\/throwingpropertywrapper","abstract":[{"type":"text","text":"A type that could be a property wrapper if "},{"type":"codeVoice","code":"get throws"},{"type":"text","text":" were supported for "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"."}],"role":"symbol"},"doc://Thrappture/documentation/Thrappture/Swift":{"identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift","kind":"symbol","role":"collection","title":"Swift","abstract":[],"url":"\/documentation\/thrappture\/swift","type":"topic"}}}