{"identifier":{"url":"doc:\/\/Thrappture\/documentation\/Thrappture\/Notes-on-Conversion","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Article","role":"article","title":"Notes on Conversion","modules":[{"name":"Thrappture"}]},"primaryContentSections":[{"content":[{"type":"heading","text":"Typed Throws and Return Values","anchor":"Typed-Throws-and-Return-Values","level":2},{"anchor":"Result","text":"Result","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"Typed throws make it so you donâ€™t need to return "},{"type":"codeVoice","code":"Result"},{"type":"text","text":"s anymore, to propagate typed errors."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Old:"}],"type":"strong"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum MatÃ©Error: Swift.Error { case ðŸ§‰ }","func string() -> Result<String, MatÃ©Error> { .failure(.ðŸ§‰) }"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"New:","type":"text"}]}]},{"type":"codeListing","syntax":"swift","code":["func string() throws(MatÃ©Error) -> String { throw .ðŸ§‰ }"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"This tip is not specific to Thrappture, but is relevant."}],"type":"emphasis"}]},{"type":"heading","level":4,"text":"Optional","anchor":"Optional"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift\/Optional\/Nil","isActive":true,"overridingTitle":"Optional.Nil","overridingTitleInlineContent":[{"type":"text","text":"Optional.Nil"}]},{"type":"text","text":" makes this possible for optionals, as well. Use it in the cases when you consider a "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" return to be an error."}]},{"type":"codeListing","syntax":"swift","code":["func string() -> String? { nil }","func string() throws(String?.Nil) -> String { throw nil }"]},{"type":"heading","level":2,"text":"Assignment","anchor":"Assignment"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift doesnâ€™t offer a very concise way to assign wrapped values of optionals to other values."}]},{"type":"codeListing","syntax":"swift","code":["if let optional { value = optional }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is not terrible, but "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" offers better."}]},{"type":"codeListing","syntax":"swift","code":["try? value = result.get() "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This package "},{"type":"reference","identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift\/Optional\/get()","isActive":true,"overridingTitle":"adds get to Optional","overridingTitleInlineContent":[{"type":"text","text":"adds "},{"type":"codeVoice","code":"get"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Optional"}]},{"type":"text","text":", allowing for the same syntax that "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" offers."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Thrappture\/documentation\/Thrappture"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/thrappture\/notes-on-conversion"]}],"references":{"doc://Thrappture/documentation/Thrappture/Swift/Optional/Nil":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Nil","kind":"identifier"}],"identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift\/Optional\/Nil","navigatorTitle":[{"text":"Nil","kind":"identifier"}],"url":"\/documentation\/thrappture\/swift\/optional\/nil","type":"topic","abstract":[{"text":"An error that represents that an ","type":"text"},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" was "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","title":"Optional.Nil"},"doc://Thrappture/documentation/Thrappture":{"abstract":[{"text":"Treat ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" like the throwing property wrappers they are.","type":"text"}],"identifier":"doc:\/\/Thrappture\/documentation\/Thrappture","title":"Thrappture","kind":"symbol","url":"\/documentation\/thrappture","role":"collection","type":"topic"},"doc://Thrappture/documentation/Thrappture/Swift/Optional/get()":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"get"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Wrapped"}],"kind":"symbol","type":"topic","title":"get()","identifier":"doc:\/\/Thrappture\/documentation\/Thrappture\/Swift\/Optional\/get()","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"get"},{"type":"text","text":" accessor for the wrapped value."}],"url":"\/documentation\/thrappture\/swift\/optional\/get()"}}}